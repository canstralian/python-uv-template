name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*' # Run on version tags
  pull_request:
    branches:
      - main
      - develop

jobs:
  build-and-test:
    name: Build and Test (${{ matrix.os }} - ${{ matrix.language-version }})
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest] # Test on multiple operating systems
        language-version: [1.18, 1.19, 1.20] # Test against multiple language versions (example using Go versions)
        # Adjust language-version based on your project's language (e.g., [14, 16, 18] for Node.js, ['3.8', '3.9', '3.10'] for Python)

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Language Environment
      # Replace with the appropriate setup action for your language
      # Examples: actions/setup-go@v5, actions/setup-node@v4, actions/setup-python@v5, actions/setup-java@v4
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.language-version }}
        cache: true # Enable caching for Go modules

    - name: Cache Dependencies
      # This step is optional and depends on your package manager.
      # setup-* actions often handle caching automatically (as shown above for Go).
      # If using a different setup or package manager, you might need a dedicated cache step.
      # Example for npm:
      # uses: actions/cache@v3
      # with:
      #   path: ~/.npm
      #   key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      #   restore-keys: |
      #     ${{ runner.os }}-node-

    - name: Install Dependencies
      # Replace with your dependency installation command
      # Examples: go mod download, npm ci, pip install -r requirements.txt, mvn clean install -DskipTests
      run: go mod download

    - name: Run Linters (Optional)
      # Add steps for running linters or code formatters if applicable
      # Example: golangci-lint run --verbose

    - name: Run Tests
      # Replace with your test command
      # Examples: go test -v ./..., npm test, pytest, mvn test
      run: go test -v ./...

    # - name: Build Project (Optional)
    #   # Add steps to build your project if necessary
    #   # Example: go build -v ./...

    # - name: Upload Artifacts (Optional)
    #   # Use actions/upload-artifact@v4 to save build outputs
    #   # uses: actions/upload-artifact@v4
    #   # with:
    #   #   name: my-app-${{ runner.os }}
    #   #   path: ./bin/my-app # Adjust path to your build output

  # deploy:
  #   name: Deploy to Production
  #   needs: build-and-test # Ensure build and test pass before deploying
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') # Deploy only on version tags

  #   steps:
  #   - name: Checkout Code
  #     uses: actions/checkout@v4

  #   - name: Set up Deployment Environment
  #     # Configure credentials, cloud provider CLI, etc.

  #   - name: Deploy Application
  #     # Add your deployment commands here
  #     # Examples: kubectl apply -f deployment.yml, sam deploy, ansible-playbook deploy.yml
